{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Button = _interopRequireDefault(require(\"./Button\"));\n\nvar _ButtonGroup = _interopRequireDefault(require(\"./ButtonGroup\"));\n\nvar _Dropdown = _interopRequireDefault(require(\"./Dropdown\"));\n\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: _propTypes.default.any,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: _propTypes.default.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: _propTypes.default.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: _propTypes.default.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: _propTypes.default.func,\n\n  /** The content of the non-toggle Button.  */\n  title: _propTypes.default.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: _propTypes.default.bool,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: _propTypes.default.string,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#menu-props) for more details_\n   */\n  rootCloseEvent: _propTypes.default.string,\n\n  /** @ignore */\n  bsPrefix: _propTypes.default.string,\n\n  /** @ignore */\n  variant: _propTypes.default.string,\n\n  /** @ignore */\n  size: _propTypes.default.string\n};\nvar defaultProps = {\n  toggleLabel: 'Toggle dropdown'\n};\n\nvar SplitButton = _react.default.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      variant = _ref.variant,\n      title = _ref.title,\n      toggleLabel = _ref.toggleLabel,\n      children = _ref.children,\n      onClick = _ref.onClick,\n      href = _ref.href,\n      target = _ref.target,\n      menuRole = _ref.menuRole,\n      rootCloseEvent = _ref.rootCloseEvent,\n      props = (0, _objectWithoutPropertiesLoose2.default)(_ref, [\"id\", \"bsPrefix\", \"size\", \"variant\", \"title\", \"toggleLabel\", \"children\", \"onClick\", \"href\", \"target\", \"menuRole\", \"rootCloseEvent\"]);\n  return _react.default.createElement(_Dropdown.default, (0, _extends2.default)({\n    ref: ref\n  }, props, {\n    as: _ButtonGroup.default\n  }), _react.default.createElement(_Button.default, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick\n  }, title), _react.default.createElement(_Dropdown.default.Toggle, {\n    split: true,\n    id: id,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix\n  }, _react.default.createElement(\"span\", {\n    className: \"sr-only\"\n  }, toggleLabel)), _react.default.createElement(_Dropdown.default.Menu, {\n    role: menuRole,\n    rootCloseEvent: rootCloseEvent\n  }, children));\n});\n\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nvar _default = SplitButton;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}